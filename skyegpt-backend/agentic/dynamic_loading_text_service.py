"""Service for generating dynamic loading texts based on user input."""

from typing import List
from pydantic_ai import Agent
from .pydantic_ai_specific import agent_factory
from . import prompts
from common import utils


class DynamicLoadingTextService:
    """Provides dynamic loading texts generated by an AI agent to show while the user waits.

    Args:
        prompt_version (prompts.PromptDefinition): The prompt definition version to use for generation.
    """

    def __init__(self, prompt_version: prompts.PromptDefinition):
        """Initializes the service with a prompt version and sets up the AI agent."""
        self.prompt_version = prompt_version
        self.agent: Agent = agent_factory.create_agent_from_prompt_version(self.prompt_version)

    async def generate_dynamic_loading_text(self, user_question: str) -> List[str]:
        """Generate a sequence of loading messages based on the user's question.

        Constructs a prompt using the user's question and invokes the agent to return loading texts.

        Args:
            user_question (str): The question or prompt provided by the user.

        Returns:
            List[str]: A list of loading text messages generated by the AI agent.

        Raises:
            UsageLimitExceededError: When a usage limit is exceeded.
            ResponseGenerationError: Various errors during response generation.
        """
        result = await self.agent.run(user_prompt=self._construct_user_prompt(user_question))
        return result.output

    def _construct_user_prompt(self, user_question: str) -> str:
        """Constructs the final user prompt.

        Injects the user's question into a predefined template.
        """
        prompt_template = self.prompt_version.prompt_template
        return utils.replace_placeholders(prompt_template, {"user_question": user_question})
