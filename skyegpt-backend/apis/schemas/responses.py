from pydantic import BaseModel, Field, ConfigDict
from typing import Any, Optional, Dict
from agentic.conversation import Conversation


class CreateConversationIdResponse(BaseModel):
    conversation_id: str = Field(
        ...,
        description="The newly generated unique identifier for the conversation thread.",
        examples=["f47ac10b-58cc-4372-a567-0e02b2c3d479"]
    )


class AgentResponse(BaseModel):
    """
    Response model for the underlying LLM agent.
    """
    generated_answer: str = Field(..., description="The complete answer generated by llm agents.")
    curr_context: Optional[Any] = Field(
        None,
        description="The context associated with the conversation after generation."
    )

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "generated_answer": "The new product features include A, B, and C.",
                    "curr_context": {"knowledge_base": ["message 1", "message 2"]}
                }
            ]
        }
    }


class PlaygroundResponse(BaseModel):
    """
    Response model for playground tests.
    """
    response: str = Field(..., description="The generated response string from the playground model.")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "response": "This is the generated text from the playground model."
                }
            ]
        }
    }


class DownloadResponse(BaseModel):
    """
    Simplified response model for downloading content to server.
    """
    folder_content: Dict[str, Any] = Field(
        ...,
        description="Dictionary representing the nested folder/file structure."
    )

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "folder_content": {
                        "name": "skye-10.0",
                        "type": "folder",
                        "children": [
                            {
                                "name": "requirements.txt",
                                "type": "file"
                            }
                        ]
                    }
                }
            ]
        }
    )


class ImportResponse(BaseModel):
    """
    Response model for Import services
    """
    number_of_documents: int = Field(..., description="Number of documents after the import.")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "number_of_documents": 42,
                }
            ]
        }
    }


class ConversationResponse(BaseModel):
    """
    Response model for retrieving a conversation
    """
    conversation: Conversation = Field(..., description="The conversation")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "conversation": ["ModelRequest", "ModelResponse"],
                }
            ]
        }
    }